{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./src/Piece.js","webpack:///./src/Tetris.js","webpack:///./src/config.js","webpack:///./src/tetrominoes.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","import Tetris from './src/Tetris';\n\nnew Tetris(document.getElementById('tetris'))\n","class Piece {\n  constructor(tetromino, colour) {\n    this.tetromino = tetromino;\n    this.tetrominoRotation = 0;\n    this.activeTetromino = this.tetromino[this.tetrominoRotation];\n    this.colour = colour;\n\n    // starts the piece above the board\n    this.rowValue = -this.activeTetromino.length - 1;\n    // centers it horizontally when created\n    this.colValue = 3;\n  }\n\n  moveDown() {\n    this.rowValue++;\n  }\n\n  moveLeft() {\n    this.colValue--;\n  }\n\n  moveRight() {\n    this.colValue++;\n  }\n\n  rotate() {\n    if (this.tetrominoRotation === 4) {\n      this.tetrominoRotation = 0;\n    } else {\n      this.tetrominoRotation++;\n    }\n  }\n}\n\nexport default Piece;\n","import { ROWS, COLUMNS, SQUARE, EMPTY } from './config';\nimport { PIECE_COLOR_MAPPING } from './tetrominoes';\nimport Piece from './Piece';\n\nlet board = [];\nlet timeToDrop = Date.now();\nlet gameOver = false;\nlet piece = null;\n\nclass Tetris {\n  constructor(canvasElement) {\n    this.context = canvasElement.getContext('2d');\n    this.createBoardArray();\n    this.drawSquares();\n    this.play();\n  }\n\n  createBoardArray() {\n    for (let row = 0; row < ROWS; row++) {\n      board[row] = [];\n      for (let col = 0; col < COLUMNS; col++) {\n        board[row][col] = EMPTY;\n      }\n    }\n  }\n  \n  drawSquares() {\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        // board[row][col] in drawSquare takes the 'white' from the\n        // internal array and renders it in the canvas\n        board[row][col] = this.drawSquare(col, row, board[row][col]);\n      }\n    }\n  }\n\n  drawSquare(x, y, colour) {\n    this.context.fillStyle = colour;\n    this.context.fillRect(x * SQUARE, y * SQUARE, SQUARE, SQUARE)\n    this.context.strokeStyle = '#888';\n    this.context.strokeRect(x * SQUARE, y * SQUARE, SQUARE, SQUARE)\n  }\n\n  drawPiece(remove = false) {\n    const colour = remove ? EMPTY : piece.colour;\n    \n    for (let row = 0; row < piece.activeTetromino.length; row++) {\n      for (let col = 0; col < piece.activeTetromino.length; col++) {\n        if (piece.activeTetromino[row][col]) {\n          this.drawSquare(piece.colValue + col, piece.rowValue + row, colour)\n        }\n      }\n    }\n  }\n\n  generateRandomPiece() {\n    const randomNum = Math.floor(Math.random() * PIECE_COLOR_MAPPING.length);\n    return new Piece(\n      PIECE_COLOR_MAPPING[randomNum][0],\n      PIECE_COLOR_MAPPING[randomNum][1]\n    );\n  }\n\n  play() {\n    piece = this.generateRandomPiece();\n    this.drawPiece(piece);\n    this.drop(piece);\n  }\n\n  placePiece() {\n    for(let row = 0; row < piece.activeTetromino.length; row++) {\n      for (let col = 0; col < piece.activeTetromino.length; col++) {\n        // skips the squares that are blank in the active tetromino\n        if (!piece.activeTetromino[row][col]) {\n          continue;\n        }\n\n        // if the row value is less than 0 then you are above the board\n        // and you have lost...loser. \n        if (piece.rowValue + row < 0) {\n          gameOver = true;\n          break;\n        }\n\n        // colour in the board\n        board[piece.rowValue + row][piece.colValue + col] = piece.colour;\n      }\n    }\n  }\n\n  drop() {\n    const now = Date.now();\n    const delta = now - timeToDrop;\n    const timeToNextDrop = 100;\n\n    if (delta > timeToNextDrop) {\n      if (!this.willCollideWithPieceOrBoard(0, 1)) {\n        this.drawPiece('remove');\n        piece.moveDown()\n        this.drawPiece();\n      } else {\n        // colour in the actual board so the area no longer \n        // registers as empty and make a new piece\n        this.placePiece();\n        piece = this.generateRandomPiece();\n      }\n      timeToDrop = Date.now();\n    }\n    if (gameOver) {\n      alert('You are such a loser, how do you live like that?');\n      console.log(board);\n      \n      //@TODO add a fancy modal here asking to play again\n    } else {\n      requestAnimationFrame(() => this.drop());\n    }\n  }\n\n  willCollideWithPieceOrBoard(xAdjustment, yAdjustment) {\n    // loop through each square in the piece's array\n    for (let row = 0; row < piece.activeTetromino.length; row++) {\n      for (let col = 0; col < piece.activeTetromino.length; col++) {\n\n        // skip empty (0 value) square (see tetrominis.js)\n        if (!piece.activeTetromino[row][col]) {\n          continue;\n        }\n\n        // adjusts the coordinate of the pieces square based on movement \n        // that is about to happen\n        let newColValue = piece.colValue + col + xAdjustment;\n        let newRowValue = piece.rowValue + row + yAdjustment;\n\n        // skip values in which y is not 0 yet (as the piece starts above the\n        // grid, so y is initially negative)\n        if (newRowValue < 0) {\n          continue;\n        }\n\n        // check if it will collide with board edges if this movement occurs\n        if (newColValue < 0 || newColValue >= COLUMNS || newRowValue >= ROWS) {\n          return true;\n        }\n\n        // check if there is a placed piece on that square of the board\n        if (board[newRowValue][newColValue] !== undefined) {\n          return true;\n        }\n\n      }\n    }\n  }\n\n}\n\nexport default Tetris;\n","const ROWS = 20;\nconst COLUMNS = 10;\nconst SQUARE = 20;\nconst EMPTY = 'white'; \n\nexport { ROWS, COLUMNS, SQUARE, EMPTY };\n","const I = [\n\t[\n\t\t[0, 0, 0, 0],\n\t\t[1, 1, 1, 1],\n\t\t[0, 0, 0, 0],\n\t\t[0, 0, 0, 0],\n\t],\n\t[\n\t\t[0, 0, 1, 0],\n\t\t[0, 0, 1, 0],\n\t\t[0, 0, 1, 0],\n\t\t[0, 0, 1, 0],\n\t],\n\t[\n\t\t[0, 0, 0, 0],\n\t\t[0, 0, 0, 0],\n\t\t[1, 1, 1, 1],\n\t\t[0, 0, 0, 0],\n\t],\n\t[\n\t\t[0, 1, 0, 0],\n\t\t[0, 1, 0, 0],\n\t\t[0, 1, 0, 0],\n\t\t[0, 1, 0, 0],\n\t]\n];\n\nconst J = [\n\t[\n\t\t[1, 0, 0],\n\t\t[1, 1, 1],\n\t\t[0, 0, 0]\n\t],\n\t[\n\t\t[0, 1, 1],\n\t\t[0, 1, 0],\n\t\t[0, 1, 0]\n\t],\n\t[\n\t\t[0, 0, 0],\n\t\t[1, 1, 1],\n\t\t[0, 0, 1]\n\t],\n\t[\n\t\t[0, 1, 0],\n\t\t[0, 1, 0],\n\t\t[1, 1, 0]\n\t]\n];\n\nconst L = [\n\t[\n\t\t[0, 0, 1],\n\t\t[1, 1, 1],\n\t\t[0, 0, 0]\n\t],\n\t[\n\t\t[0, 1, 0],\n\t\t[0, 1, 0],\n\t\t[0, 1, 1]\n\t],\n\t[\n\t\t[0, 0, 0],\n\t\t[1, 1, 1],\n\t\t[1, 0, 0]\n\t],\n\t[\n\t\t[1, 1, 0],\n\t\t[0, 1, 0],\n\t\t[0, 1, 0]\n\t]\n];\n\nconst O = [\n\t[\n\t\t[0, 0, 0, 0],\n\t\t[0, 1, 1, 0],\n\t\t[0, 1, 1, 0],\n\t\t[0, 0, 0, 0],\n\t]\n];\n\nconst S = [\n\t[\n\t\t[0, 1, 1],\n\t\t[1, 1, 0],\n\t\t[0, 0, 0]\n\t],\n\t[\n\t\t[0, 1, 0],\n\t\t[0, 1, 1],\n\t\t[0, 0, 1]\n\t],\n\t[\n\t\t[0, 0, 0],\n\t\t[0, 1, 1],\n\t\t[1, 1, 0]\n\t],\n\t[\n\t\t[1, 0, 0],\n\t\t[1, 1, 0],\n\t\t[0, 1, 0]\n\t]\n];\n\nconst T = [\n\t[\n\t\t[0, 1, 0],\n\t\t[1, 1, 1],\n\t\t[0, 0, 0]\n\t],\n\t[\n\t\t[0, 1, 0],\n\t\t[0, 1, 1],\n\t\t[0, 1, 0]\n\t],\n\t[\n\t\t[0, 0, 0],\n\t\t[1, 1, 1],\n\t\t[0, 1, 0]\n\t],\n\t[\n\t\t[0, 1, 0],\n\t\t[1, 1, 0],\n\t\t[0, 1, 0]\n\t]\n];\n\nconst Z = [\n\t[\n\t\t[1, 1, 0],\n\t\t[0, 1, 1],\n\t\t[0, 0, 0]\n\t],\n\t[\n\t\t[0, 0, 1],\n\t\t[0, 1, 1],\n\t\t[0, 1, 0]\n\t],\n\t[\n\t\t[0, 0, 0],\n\t\t[1, 1, 0],\n\t\t[0, 1, 1]\n\t],\n\t[\n\t\t[0, 1, 0],\n\t\t[1, 1, 0],\n\t\t[1, 0, 0]\n\t]\n];\n\nconst PIECE_COLOR_MAPPING = [\n\t[I, 'cyan'],\n\t[J, 'orange'],\n\t[L, 'purple'],\n\t[O, 'blue'],\n\t[S, 'green'],\n\t[T, 'yellow'],\n\t[Z, 'red']\n]\n\nexport { I, J, L, O, S, T, Z, PIECE_COLOR_MAPPING };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAEA;;;;;;;;;;;;ACFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AACA;AAiCA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/IA;AACA;AAiJA;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAuBA;AAuBA;AASA;AAuBA;AAuBA;AAuBA;;;;;A","sourceRoot":""}